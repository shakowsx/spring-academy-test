{
	"info": {
		"_postman_id": "fa3d0826-9363-4069-b4b1-a81fcbf910b0",
		"name": "Warhouse REST API basics: CRUD, test & variable",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [http://localhost:8080/](http://localhost:8080/). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "33666353"
	},
	"item": [
		{
			"name": "GetRequests",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/products",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"acb0a628-79af-4328-84c8-43339dd1f72c\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID that not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID with wrong format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"wrong-format\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID with wrong field name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"wrongid\": \"d70b8076-853a-434c-bacf-7bdba73f3b2a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PostRequests",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞",
									"var responseBody = pm.response.json();",
									"",
									"// –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
									"var expectedProductFields = {",
									"    \"sku\": pm.variables.get(\"expectedSku\"),",
									"    \"name\": pm.variables.get(\"expectedName\"),",
									"    \"description\": pm.variables.get(\"expectedDescription\"),",
									"    \"category\": pm.variables.get(\"expectedCategory\"),",
									"    \"price\": parseFloat(pm.variables.get(\"expectedPrice\")),",
									"    \"quantity\": parseInt(pm.variables.get(\"expectedQuantity\"))",
									"};",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ product",
									"for (var field in expectedProductFields) {",
									"    pm.test(`Product field ${field} is as expected`, function () {",
									"        pm.expect(responseBody.product[field]).to.eql(expectedProductFields[field]);",
									"    });",
									"}",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ message –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
									"var expectedMessage = \"Product created successfully.\";",
									"pm.test(\"Message is as expected\", function () {",
									"    pm.expect(responseBody.message).to.eql(expectedMessage);",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ",
									"pm.test(\"Product ID is present\", function () {",
									"    pm.expect(responseBody.product.id).to.be.a('string').and.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"// –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON\r",
									"var parsedRequestBody = JSON.parse(requestBody);\r",
									"\r",
									"// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\r",
									"pm.variables.set(\"expectedSku\", parsedRequestBody.sku);\r",
									"pm.variables.set(\"expectedName\", parsedRequestBody.name);\r",
									"pm.variables.set(\"expectedDescription\", parsedRequestBody.description);\r",
									"pm.variables.set(\"expectedCategory\", parsedRequestBody.category);\r",
									"pm.variables.set(\"expectedPrice\", parsedRequestBody.price);\r",
									"pm.variables.set(\"expectedQuantity\", parsedRequestBody.quantity);\r",
									"pm.variables.set(\"expectedMessage\", \"Product created successfully.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sku\": \"TEST-SKU-1000\",\n    \"name\": \"Test product\",\n    \"description\": \"Test description\",\n    \"category\": \"Test category\",\n    \"price\": \"100.00\",\n    \"quantity\": \"1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create product with validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sku\": \"\",\n    \"name\": \"\",\n    \"description\": \"Test description\",\n    \"category\": \"Test categorty\",\n    \"price\": \"-100.00\",\n    \"quantity\": \"-1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create product with invalid price format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sku\": \"TEST-SKU1\",\n    \"name\": \"Test product\",\n    \"description\": \"Test description\",\n    \"category\": \"Test categorty\",\n    \"price\": \"test\",\n    \"quantity\": \"1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create product with invalid quantity format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sku\": \"TEST-SKU1\",\n    \"name\": \"Test product\",\n    \"description\": \"Test description\",\n    \"category\": \"Test categorty\",\n    \"price\": \"10.00\",\n    \"quantity\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create product with wrong data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"test1\": \"TEST-SKU1\",\n    \"test2\": \"Test product\",\n    \"test3\": \"Test description\",\n    \"test4\": \"Test categorty\",\n    \"test5\": \"100.00\",\n    \"test6\": \"1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "PostRequests",
			"item": [
				{
					"name": "Update product by ID with quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"2eec8bc0-23bd-46fc-aff5-44632be1c333\",\n    \"sku\": \"TEST-SKU9999999999\",\n    \"name\": \"Updated test product name\",\n    \"description\": \"Updated test description\",\n    \"category\": \"Updated test categorty\",\n    \"price\": \"1000.01\",\n    \"quantity\": {{$randomInt}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID without quantity change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"2eec8bc0-23bd-46fc-aff5-44632be1c333\",\n    \"sku\": \"TEST-SKU9999999999\",\n    \"name\": \"{{$randomProductName}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"category\": \"{{$randomProduct}}\",\n    \"price\": \"{{$randomPrice}}\",\n    \"quantity\": \"10001\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID with wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"test\",\n    \"sku\": \"TEST-SKU14\",\n    \"name\": \"Updated test product name\",\n    \"description\": \"Updated test description\",\n    \"category\": \"Updated test categorty\",\n    \"price\": \"1000.01\",\n    \"quantity\": {{$randomInt}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID that not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{$randomUUID}}\",\n    \"sku\": \"TEST-SKU14\",\n    \"name\": \"Updated test product name\",\n    \"description\": \"Updated test description\",\n    \"category\": \"Updated test categorty\",\n    \"price\": {{$randomPrice}},\n    \"quantity\": {{$randomInt}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID with validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"sku\": \"\",\n    \"name\": \"\",\n    \"description\": \"Updated test description\",\n    \"category\": \"Updated test categorty\",\n    \"price\": \"-100.00\",\n    \"quantity\": \"-1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID with invalid price format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"fb1dede4-f217-488e-be1b-05da200d5be6\",\n    \"sku\": \"TEST-SKU1\",\n    \"name\": \"Test product\",\n    \"description\": \"Test description\",\n    \"category\": \"Test categorty\",\n    \"price\": \"test\",\n    \"quantity\": \"1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update product by ID with invalid quantity format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"fb1dede4-f217-488e-be1b-05da200d5be6\",\n    \"sku\": \"TEST-SKU1\",\n    \"name\": \"Test product\",\n    \"description\": \"Test description\",\n    \"category\": \"Test categorty\",\n    \"price\": \"10.00\",\n    \"quantity\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteRequests",
			"item": [
				{
					"name": "Delete product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"2316c58a-c544-47d0-a5c4-c109557efb17\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete product by ID that not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/products/",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:8080/api"
		},
		{
			"key": "expectedSku",
			"value": "",
			"type": "string"
		},
		{
			"key": "expectedName",
			"value": "",
			"type": "string"
		},
		{
			"key": "expectedDescription",
			"value": "",
			"type": "string"
		},
		{
			"key": "expectedCategory",
			"value": "",
			"type": "string"
		},
		{
			"key": "expectedPrice",
			"value": "",
			"type": "string"
		},
		{
			"key": "expectedQuantity",
			"value": "",
			"type": "string"
		}
	]
}